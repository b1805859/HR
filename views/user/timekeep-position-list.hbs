<!-- Content wrapper -->
<div class="content-wrapper">
  <!-- Content -->

  <div class="container-fluid flex-grow-1">
    <h4 class="fw-bold mt-3 mb-4"><span class="text-muted fw-light">Chấm công /</span> Vị trí chấm công</h4>

    <div class="card">
      <div class="card-body">
        <!-- Layout Demo -->
        <div class="row">

          <div class="mt-3 col-md-6">
            <h4 class="mb-3">Danh sách vị trí chấm công</h4>
            <div class="table-responsive text-nowrap">
              <table class="table table-hover table-bordered">
                <thead>
                  <tr>
                    <th class="text-center p-3" style="background: #233446; color:#fff">Công ty</th>
                    </th>
                    <th class="text-center p-3" style="background: #233446; color:#fff">Địa chỉ</th>
                    </th>
                    <th class="text-center p-3" style="background: #233446; color:#fff">Hoạt động</th>
                    </th>
                  </tr>
                </thead>
                <tbody id="timekeep-position" class="table-border-bottom-0">

                </tbody>
              </table>
            </div>
          </div>
          <div class="mt-3 col-md-6">

            <div id="map" style="width: 100%; height: 82vh;min-height: 40vh;border-radius: 5px;"></div>
            {{!--
            <pre id="coordinates" class="coordinates"></pre> --}}
          </div>

        </div>
      </div>
    </div>



    <!--/ Layout Demo -->
  </div>
  <!-- / Content -->


  <div class="content-backdrop fade"></div>
</div>
<!-- Content wrapper -->
{{!--
<script src="/assets/js/map_no.js"></script> --}}

<script>


  var positions_encode = `{{ positions }}`
  var positions = JSON.parse(positions_encode.replace(/&quot;/ig, '"'));
  var positions_html = ''
  var coordinates = []
  for (const position of positions) {
    let result = {
      id: position._id,
      longitude: position.longitude,
      latitude: position.latitude
    }
    positions_html += `<tr>`
    positions_html += `<td style="font-size:0.9375rem;">${position.name}</td>`
    positions_html += `<td style="font-size:0.9375rem;">${position.address}</td>`
    positions_html += `<td class="text-center"> 
                            <button id="${position._id}" type="button" class="btn btn-outline-primary">
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
                                <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"></path>
                                <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"></path>
                              </svg>
                            </button>
                        </td>`
    positions_html += `</tr>`
    coordinates.push(result)
  }

  $('#timekeep-position').html(positions_html)




  mapboxgl.accessToken =
    'pk.eyJ1IjoibGVoaWV1IiwiYSI6ImNsN3dmanhvbTBsNTIzb3I5M3d3dGJuMzcifQ.SYPd3n3mUWWTlT0K8UvEyg';

  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function (position) {
      const { coords } = position
      const { latitude, longitude } = coords
      const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        zoom: 12, // starting zoom
        center: [longitude, latitude] // starting position [lng, lat]
      });





      const size = 150;

      // This implements `StyleImageInterface`
      // to draw a pulsing dot icon on the map.
      const pulsingDot = {
        width: size,
        height: size,
        data: new Uint8Array(size * size * 4),

        // When the layer is added to the map,
        // get the rendering context for the map canvas.
        onAdd: function () {
          const canvas = document.createElement('canvas');
          canvas.width = this.width;
          canvas.height = this.height;
          this.context = canvas.getContext('2d');
        },

        // Call once before every frame where the icon will be used.
        render: function () {
          const duration = 1000;
          const t = (performance.now() % duration) / duration;

          const radius = (size / 2) * 0.3;
          const outerRadius = (size / 2) * 0.7 * t + radius;
          const context = this.context;

          // Draw the outer circle.
          context.clearRect(0, 0, this.width, this.height);
          context.beginPath();
          context.arc(
            this.width / 2,
            this.height / 2,
            outerRadius,
            0,
            Math.PI * 2
          );
          context.fillStyle = `rgba(255, 200, 200, ${1 - t})`;
          context.fill();

          // Draw the inner circle.
          context.beginPath();
          context.arc(
            this.width / 2,
            this.height / 2,
            radius,
            0,
            Math.PI * 2
          );
          context.fillStyle = 'rgba(255, 100, 100, 1)';
          context.strokeStyle = 'white';
          context.lineWidth = 2 + 4 * (1 - t);
          context.fill();
          context.stroke();

          // Update this image's data with data from the canvas.
          this.data = context.getImageData(
            0,
            0,
            this.width,
            this.height
          ).data;

          // Continuously repaint the map, resulting
          // in the smooth animation of the dot.
          map.triggerRepaint();

          // Return `true` to let the map know that the image was updated.
          return true;
        }
      };




      // Fetch stores from API
      async function getStores() {
        const res = await fetch('/api/timekeep/positionMap');
        const data = await res.json();

        const stores = data.data.map(store => {
          return {
            type: 'Feature',
            geometry: {
              'type': 'Point',
              'coordinates': [
                store.location.coordinates[0],
                store.location.coordinates[1]
              ] // icon position [lng, lat]
            },
            properties: {
              name: store.name,
            }
          };
        });

        loadMap(stores);
      }

      // Load map with stores
      function loadMap(stores) {
        map.on('load', () => {
          map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 3 });

          map.addSource('dot-point', {
            'type': 'geojson',
            'data': {
              'type': 'FeatureCollection',
              'features': stores
            }
          });
          map.addLayer({
            'id': 'layer-with-pulsing-dot',
            'type': 'symbol',
            'source': 'dot-point',
            'layout': {
              'icon-image': 'pulsing-dot',
              'text-field': '{name}',
              'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],
              'text-offset': [0, 0.9],
              'text-anchor': 'top'
            }
          });
        });
      }

      getStores();




      map.on('style.load', () => {
        map.setFog({}); // Set the default atmosphere style
      });

      // Add geolocate control to the map.
      map.addControl(
        new mapboxgl.GeolocateControl({
          positionOptions: {
            enableHighAccuracy: true
          },
          // When active the map will receive updates to the device's location as it changes.
          trackUserLocation: true,
          // Draw an arrow next to the location dot to indicate which direction the device is heading.
          showUserHeading: true
        })
      );


      for (const coor of coordinates) {
        const { id, longitude, latitude } = coor
        $(`#${id}`).click(function () {
          map.flyTo({
            center: [longitude, latitude],
            essential: true // this animation is considered essential with respect to prefers-reduced-motion
          });
        })
      }

    });




  }



</script>