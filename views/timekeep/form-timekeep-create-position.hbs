<!-- Content wrapper -->
<div class="content-wrapper">
  <!-- Content -->

  <div class="container-xxl flex-grow-1">
    <h4 class="fw-bold mb-4"><span class="text-muted fw-light">Vị trí chấm công/</span> Thêm vị trí chấm công
    </h4>

    <div class="row">
      <div class="col-md-6">
        <div id="map" class="" style="position: relative;z-index: 10;width: 100%;height: 565px;border-radius: 5px;">
          <pre id="info" class="mb-0 p-4" style="position: absolute;
                           z-index: 15;
                           left: 50%;
                           width:350px;
                           font-size:0.9rem;
                           min-height:88px;
                           color:#fff;
                           transform: translateX(-50%);
                           background-color: #000;
                           opacity: .6;">
                </pre>
        </div>
      </div>
      <div class="col-md-6">
        <div class="card mb-4">
          <h5 class="card-header">Thêm xác nhận GPS</h5>
          <!-- Account -->
          <form action="/api/timekeep/position" method="POST">
            <div class="card-body">
              <div class="row">
                <div class="mb-3 col-md-12">
                  <label for="name" class="form-label">Tên công ty</label> (<span class="text-danger">*</span>)
                  <input class="form-control" type="text" id="name" name="name" required autofocus autocomplete="off" />
                </div>

                <div class="mb-3 col-md-12">
                  <label for="latitude" class="form-label">Vĩ độ (Latitude)</label> (<span class="text-danger">*</span>)
                  <input class="form-control" type="text" id="latitude" name="latitude" value="" required
                    autocomplete="off" />
                </div>

                <div class="mb-3 col-md-12">
                  <label for="longitude" class="form-label">Kinh độ (Longitude)</label> (<span
                    class="text-danger">*</span>)
                  <input class="form-control" type="text" id="longitude" name="longitude" value="" required
                    autocomplete="off" />
                </div>

                <div class="mb-3 col-md-12">
                  <label for="address" class="form-label">Địa chỉ</label> (<span class="text-danger">*</span>)
                  <input class="form-control" type="text" id="address" name="address" value="" required
                    autocomplete="off" />
                </div>
              </div>
              <div class="mt-2">
                <button type="submit" class="btn btn-primary me-2">Lưu</button>
              </div>
            </div>

          </form>
          <!-- /Account -->
        </div>
      </div>
    </div>
  </div>
  <!-- / Content -->


  <div class="content-backdrop fade"></div>
</div>
<!-- Content wrapper -->

<script>
  mapboxgl.accessToken =
    'pk.eyJ1IjoibGVoaWV1IiwiYSI6ImNsN3dmanhvbTBsNTIzb3I5M3d3dGJuMzcifQ.SYPd3n3mUWWTlT0K8UvEyg';

  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function (position) {
      const { coords } = position
      const { latitude, longitude } = coords
      const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        zoom: 10, // starting zoom
        center: [longitude, latitude] // starting position [lng, lat]
      });




      const size = 200;

      // This implements `StyleImageInterface`
      // to draw a pulsing dot icon on the map.
      const pulsingDot = {
        width: size,
        height: size,
        data: new Uint8Array(size * size * 4),

        // When the layer is added to the map,
        // get the rendering context for the map canvas.
        onAdd: function () {
          const canvas = document.createElement('canvas');
          canvas.width = this.width;
          canvas.height = this.height;
          this.context = canvas.getContext('2d');
        },

        // Call once before every frame where the icon will be used.
        render: function () {
          const duration = 1000;
          const t = (performance.now() % duration) / duration;

          const radius = (size / 2) * 0.3;
          const outerRadius = (size / 2) * 0.7 * t + radius;
          const context = this.context;

          // Draw the outer circle.
          context.clearRect(0, 0, this.width, this.height);
          context.beginPath();
          context.arc(
            this.width / 2,
            this.height / 2,
            outerRadius,
            0,
            Math.PI * 2
          );
          context.fillStyle = `rgba(255, 200, 200, ${1 - t})`;
          context.fill();

          // Draw the inner circle.
          context.beginPath();
          context.arc(
            this.width / 2,
            this.height / 2,
            radius,
            0,
            Math.PI * 2
          );
          context.fillStyle = 'rgba(255, 100, 100, 1)';
          context.strokeStyle = 'white';
          context.lineWidth = 2 + 4 * (1 - t);
          context.fill();
          context.stroke();

          // Update this image's data with data from the canvas.
          this.data = context.getImageData(
            0,
            0,
            this.width,
            this.height
          ).data;

          // Continuously repaint the map, resulting
          // in the smooth animation of the dot.
          map.triggerRepaint();

          // Return `true` to let the map know that the image was updated.
          return true;
        }
      };




      // Fetch stores from API
      async function getStores() {
        const res = await fetch('/api/timekeep/positionMap');
        const data = await res.json();

        const stores = data.data.map(store => {
          return {
            type: 'Feature',
            geometry: {
              'type': 'Point',
              'coordinates': [
                store.location.coordinates[0],
                store.location.coordinates[1]
              ] // icon position [lng, lat]
            },
            properties: {
              name: store.name,
            }
          };
        });

        loadMap(stores);
      }

      // Load map with stores
      function loadMap(stores) {
        map.on('load', () => {
          map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 3 });

          map.addSource('dot-point', {
            'type': 'geojson',
            'data': {
              'type': 'FeatureCollection',
              'features': stores
            }
          });
          map.addLayer({
            'id': 'layer-with-pulsing-dot',
            'type': 'symbol',
            'source': 'dot-point',
            'layout': {
              'icon-image': 'pulsing-dot',
              'text-field': '{name}',
              'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],
              'text-offset': [0, 0.9],
              'text-anchor': 'top'
            }
          });
        });
      }

      getStores();




      map.on('style.load', () => {
        map.setFog({}); // Set the default atmosphere style
      });

      // Add geolocate control to the map.
      map.addControl(
        new mapboxgl.GeolocateControl({
          positionOptions: {
            enableHighAccuracy: true
          },
          // When active the map will receive updates to the device's location as it changes.
          trackUserLocation: true,
          // Draw an arrow next to the location dot to indicate which direction the device is heading.
          showUserHeading: true
        })
      );



      const maker = new mapboxgl.Marker()



      map.on('click', (e) => {
        const { lng, lat } = e.lngLat
        document.getElementById('info').innerHTML =
          // `e.point` is the x, y coordinates of the `mousemove` event
          // relative to the top-left corner of the map.
          // `e.lngLat` is the longitude, latitude geographical position of the event.

          `LATITUDE: ${lat}</br>LONGITUDE: ${lng}`

        maker.setLngLat([lng, lat])
          .addTo(map);
      });
    });
  }
</script>